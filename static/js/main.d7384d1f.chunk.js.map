{"version":3,"sources":["assets/close.svg","Header.js","Intro.js","Buttons.js","Gallery.js","Modal.js","Footer.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Component","Intro","href","aria-label","rel","target","Buttons","props","name","id","map","button","key","onClick","changeBooks","Gallery","tabIndex","src","bookImg","alt","bookTitle","bookAuthor","openModal","Modal","modal","selectedBook","show","close","title","author","description","value","book_image","event","addToList","Footer","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","getBooks","url","state","urlCategory","axios","method","format","then","res","setState","bookArray","data","results","books","handleClick","openModalHandler","filter","book","rank","parseInt","isShowing","closeModalHandler","handleSelect","preventDefault","database","ref","push","savedBooks","this","on","result","newState","val","object","console","log","bookId","child","remove","i","removeBook","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d7384d1f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/close.d0301819.svg\";","import React, { Component } from 'react';\n\nclass Header extends Component {\n    render() {\n        return(\n            <header>\n                <div className=\"headerContainer wrapper\">\n                    <h1>Bestsellers to Read</h1>\n                </div>\n            </header>\n        );\n    }\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass Intro extends Component { \n    render() {\n        return (\n            <section className=\"wrapper\">\n                <h2>Looking for your next book to read? Choose a category below and browse the bestselling books per the <a href=\"https://www.nytimes.com/books/best-sellers/\" aria-label=\"link to New York Times bestsellers list\" rel=\"noopener noreferrer\" target=\"_blank\">New York Times</a> make a list of the ones you want to read. </h2>\n            </section>\n        )\n    }\n}\n\nexport default Intro;","import React from 'react';\n\nfunction Buttons(props) {\n    \n    const buttonInfo = [\n        { name: \"Non Fiction\", id: \"combined-print-and-e-book-nonfiction\", \"aria-label\": \"click to generate non fiction books\" },\n        { name: \"Fiction\", id: \"combined-print-and-e-book-fiction\", \"aria-label\": \"click to generate fiction books\" },\n        { name: \"Travel\", id: \"travel\", \"aria-label\": \"click to generate travel books\" },\n        { name: \"Sports\", id: \"sports\", \"aria-label\": \"click to generate sports books\" },\n        { name: \"Young Adult\", id: \"young-adult-hardcover\", \"aria-label\": \"click to generate young adult books\" },\n        { name: \"Comedy\", id: \"humor\", \"aria-label\": \"click to generate comedy books\" },\n        { name: \"Business\", id: \"business-books\", \"aria-label\": \"click to generate business books\" },\n        { name: \"Crime & Law\", id: \"crime-and-punishment\", \"aria-label\": \"click to generate crime & law books\" },\n\n    ]\n    \n    return (\n        <ul className=\"bookSelect wrapper\">\n            {buttonInfo.map((button) => {\n                return(\n                <li key={button.id}>\n                    <button\n                    id={button.id}\n                    aria-label={button[\"aria-label\"]}\n                    onClick={props.changeBooks}\n                    >{button.name}</button>\n                </li>\n                )\n            })}\n        </ul>\n    );\n}\n\nexport default Buttons;","import React from 'react';\n\nconst Gallery = (props) => {\n    return (\n        <li tabIndex=\"0\">\n            <img \n            id={props.id}\n            src={props.bookImg} \n            alt={`${props.bookTitle} by ${props.bookAuthor}`} \n            onClick={props.openModal}\n            />\n            \n        </li>\n    );\n}\n\n\nexport default Gallery;","import React from 'react';\nimport close from './assets/close.svg'\n\n// Function component to show the modal on the page using the .filter() to display only the content of the book that is clicked or focused\n\nconst Modal = (props) => {\n    const modal = props.selectedBook;\n    \n    return(\n       \n     <div>\n         {props.show === true\n                ? <div className=\"modal\">\n                    <div className=\"modalContent wrapper\" >\n                        <span className=\"close\" aria-label=\"close\" onClick={props.close}><img src={close} alt=\"\"></img></span>\n                        <h4>{`${modal.title} by ${modal.author}`}</h4>\n                        <p>{modal.description}</p>\n                        <img value={modal.book_image}className=\"book\" src={modal.book_image} alt={`${modal.title} by ${modal.author}`}/>\n                        <button onClick={(event) => props.addToList(event)}>Add book to list</button>\n                    </div>\n                    </div>\n                : null\n         }\n\n    </div>  \n    )\n}\n\n\nexport default Modal;","import React from 'react';\n\nfunction Footer() {\n\n    return (\n        <footer>\n            <p>Emma Walden 2020</p>\n        </footer>\n    );\n}\n\nexport default Footer;","// firebase.js\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Initialize Firebase\nconst config = {\n    apiKey: \"AIzaSyDRFzWvnZt8Xyet3LYIdEtkJ-MI2mXHTsw\",\n    authDomain: \"project-five-7d718.firebaseapp.com\",\n    databaseURL: \"https://project-five-7d718.firebaseio.com\",\n    projectId: \"project-five-7d718\",\n    storageBucket: \"project-five-7d718.appspot.com\",\n    messagingSenderId: \"167738762781\",\n    appId: \"1:167738762781:web:e43bcfd388626767ed08f4\"\n};\n\n\nfirebase.initializeApp(config);\n\n// this exports the CONFIGURED version of firebase\nexport default firebase;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './Styles/App.scss';\nimport Header from './Header.js';\nimport Intro from './Intro.js';\nimport Buttons from './Buttons.js';\nimport Gallery from './Gallery.js';\nimport Modal from './Modal.js';\nimport Footer from './Footer.js';\nimport firebase from './firebase.js';\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      bookArray: [],\n      urlCategory: \"hardcover-fiction\",\n      isShowing: false,\n      selectedBook: {},\n      // empty array to store books to push to firebase\n      savedBooks: [],\n      \n    };\n  };\n\n\n  componentDidMount() {\n    // Go get book information from API - NYT Books\n    this.getBooks();\n\n    // variable that references the firebase database\n    const dbRef = firebase.database().ref();\n    // event listener to fire every time there is a change in the database\n    dbRef.on('value', (result) => {\n      const newState = [];\n      // Store the response from firebase in this variable\n      const data = result.val();\n      // The data comes back in an object so we loop over it \n      for (let key in data) {\n        // push each book to the new state array \n        newState.push({key: key, object: data[key]});\n        console.log(\"key\", key);\n        console.log(\"data\", data[key].book_image);\n      }\n      this.setState({\n        // update the component's state using the newState array\n        savedBooks: newState\n      })\n\n      });\n      \n    \n  };\n\n  getBooks = () => {\n    const key = 'E1ntAP6SqFYuIsPBrhGwXxHj6xBbjTYV';\n    const url = `https://api.nytimes.com/svc/books/v3/lists/current/${this.state.urlCategory}.json?api-key=E1ntAP6SqFYuIsPBrhGwXxHj6xBbjTYV`;\n\n    axios({\n      method: 'GET',\n      url: url,\n      \"api-key\": key,\n      format: 'json',\n    }).then((res) => {\n      \n      this.setState({\n        bookArray: res.data.results.books\n        \n      });\n    });\n  };\n\n  handleClick = (event) => {\n    // figure out what button was clicked\n    // update the state \n    this.setState({\n      urlCategory: event.target.id\n    }, () => this.getBooks());\n  }\n\n  // Modal Functions - when a book is clicked or focused populate the description, title, image of that book in a modal\n  openModalHandler = (event) => {\n    // loop through the books array and use filter to return the particular book that was clicked\n\n    const selectedBook = this.state.bookArray.filter((book) => {\n      return book.rank === parseInt(event.target.id) + 1\n    })\n  \n    \n    this.setState({\n      // Modal is showing on the page\n      isShowing: true,\n      // Set the selected book to state\n      selectedBook: selectedBook[0]\n    });\n  }\n\n  closeModalHandler = () => {\n    // Modal is not showing on the page\n    this.setState({\n      isShowing: false\n    });\n  }\n\n  // This event will fire when there is a click to add a new book to the list\n  handleSelect = (event) => {\n    event.preventDefault();\n    const dbRef = firebase.database().ref();\n    dbRef.push(this.state.selectedBook);\n  \n    this.setState({\n      isShowing: false\n    });\n\n  };\n\n  // Function to remove books from the saved Books array on click\n  removeBook(bookId) {\n    console.log(bookId);\n    const dbRef = firebase.database().ref();\n    dbRef.child(bookId).remove();\n    \n  }\n\n  render() {\n          \n    return (\n      <>\n      <Header />\n        <main>\n          {/* Intro section to the app */}\n          <Intro />\n          {/* List of book categories to choose from that will populate new book images and descriptions */}\n          <Buttons changeBooks={this.handleClick}/>\n\n          {/* Gallery of book images and descriptions */}\n          <ul className=\"bookGallery wrapper\">\n            {/* Mapping over the array of books from the API call */}\n            {this.state.bookArray.map((book, i) => {\n              // Displaying the book image to the page\n              return (\n                <Gallery \n                  key={i} \n                  id={i}\n                  bookImg={book.book_image} \n                  bookTitle={book.title} \n                  bookAuthor={book.author} \n                  openModal={this.openModalHandler}\n                />\n              );\n            })}\n          </ul>\n          <Modal \n            show={this.state.isShowing}\n            selectedBook={this.state.selectedBook}\n            close={this.closeModalHandler}\n            addToList={this.handleSelect}\n          /> \n          <section className=\"bookList\">\n            <div className=\"wrapper\">\n            <h5>Books To Read</h5>\n              <ul className=\"savedBooks\">   \n              {this.state.savedBooks.map((book) => {\n                return <li key={book.key}>\n                  <img src={book.object.book_image} alt={`${book.object.title} by ${book.object.author}`}/><span onClick={() => this.removeBook(book.key)}>X</span>\n                  </li>\n                  \n              })}\n                \n              </ul> \n            </div>\n          </section>\n      </main>\n      <Footer />\n    </>\n    );\n  };\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}